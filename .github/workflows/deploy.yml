name: TTS API CI/CD Pipeline

on:
  push:
    branches: [dev]  # Only run on dev branch - main branch releases handled by package.yml
    paths:
      - '**'
      - '.github/workflows/deploy.yml'
  pull_request:
    branches: [main]
    paths:
      - '**'

env:
  REGISTRY: ghcr.io
  BACKEND_IMAGE_NAME: ${{ github.repository }}
  FRONTEND_IMAGE_NAME: ${{ github.repository }}-frontend

jobs:
  # Code Quality and Testing
  quality-check:
    runs-on: ubuntu-latest
    defaults:
      run:
        
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Code formatting check
      run: |
        ruff format --check app tests
    
    - name: Linting
      run: |
        ruff check app tests
    
    - name: Security scan
      run: |
        bandit -r app/ -f json -o bandit-report.json || true
    
    - name: Run tests with coverage
      run: |
        PYTHONPATH=. coverage run -m pytest tests/ -v
        coverage report --include="app/*"
        coverage xml --include="app/*"
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: speaker-coverage
    
    - name: Upload test artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: |
          coverage.xml
          bandit-report.json

  # Frontend Quality Check
  frontend-quality:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install frontend dependencies
      run: |
        cd frontend
        npm ci
    
    - name: Run frontend tests
      run: |
        cd frontend
        npm run build
    
    - name: Upload frontend build artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: frontend-build
        path: frontend/dist/

  # Build and Push Docker Images
  build-and-push:
    needs: [quality-check, frontend-quality]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    outputs:
      backend-image: ${{ steps.backend-image.outputs.image }}
      frontend-image: ${{ steps.frontend-image.outputs.image }}
      digest: ${{ steps.build-backend.outputs.digest }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata for backend
      id: meta-backend
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Extract metadata for frontend
      id: meta-frontend
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push backend Docker image
      id: build-backend
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: ${{ steps.meta-backend.outputs.tags }}
        labels: ${{ steps.meta-backend.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64
    
    - name: Build and push frontend Docker image
      id: build-frontend
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        file: ./frontend/Dockerfile
        push: true
        tags: ${{ steps.meta-frontend.outputs.tags }}
        labels: ${{ steps.meta-frontend.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64
    
    - name: Output backend image
      id: backend-image
      run: |
        echo "image=${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE_NAME }}:${{ github.sha }}" >> $GITHUB_OUTPUT
    
    - name: Output frontend image
      id: frontend-image
      run: |
        echo "image=${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE_NAME }}:${{ github.sha }}" >> $GITHUB_OUTPUT

  # Security Scanning
  security-scan:
    needs: build-and-push
    runs-on: ubuntu-latest
    permissions:
      security-events: write
    
    steps:
    - name: Run Trivy vulnerability scanner on backend
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ needs.build-and-push.outputs.backend-image }}
        format: 'sarif'
        output: 'trivy-backend-results.sarif'
    
    - name: Run Trivy vulnerability scanner on frontend
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ needs.build-and-push.outputs.frontend-image }}
        format: 'sarif'
        output: 'trivy-frontend-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-backend-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-frontend-results.sarif'

  # Deploy to Development
  deploy-dev:
    if: github.ref == 'refs/heads/dev'
    needs: [build-and-push, security-scan]
    runs-on: ubuntu-latest
    environment: development
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'
    
    - name: Configure kubectl
      run: |
        echo "${{ secrets.KUBECONFIG_DEV }}" | base64 -d > $HOME/.kube/config
    
    - name: Update images in deployment
      run: |
        cd k8s
        sed -i "s|image: speaker:latest|image: ${{ needs.build-and-push.outputs.backend-image }}|g" deployment.yaml
        sed -i "s|image: speaker-frontend:latest|image: ${{ needs.build-and-push.outputs.frontend-image }}|g" frontend-deployment.yaml
        sed -i "s|namespace: speaker|namespace: speaker-dev|g" *.yaml
    
    - name: Deploy to development
      run: |
        cd k8s
        kubectl apply -f namespace.yaml
        kubectl apply -f configmap.yaml
        kubectl apply -f secret.yaml
        kubectl apply -f pvc.yaml
        kubectl apply -f deployment.yaml
        kubectl apply -f frontend-deployment.yaml
        kubectl apply -f service.yaml
        kubectl apply -f frontend-service.yaml
        kubectl apply -f hpa.yaml
        kubectl apply -f monitoring/
    
    - name: Wait for deployment
      run: |
        kubectl wait --for=condition=available --timeout=600s deployment/speaker -n speaker-dev
        kubectl wait --for=condition=available --timeout=600s deployment/speaker-frontend -n speaker-dev
    
    - name: Run smoke tests
      run: |
        kubectl port-forward service/speaker-service 8010:8000 -n speaker-dev &
        kubectl port-forward service/speaker-frontend-service 3010:80 -n speaker-dev &
        sleep 10
        curl -f http://localhost:8010/health || exit 1
        curl -f http://localhost:8010/voices || exit 1
        curl -f http://localhost:3010/ || exit 1

  # Deploy to Production
  deploy-prod:
    if: github.ref == 'refs/heads/main'
    needs: [build-and-push, security-scan]
    runs-on: ubuntu-latest
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'
    
    - name: Configure kubectl
      run: |
        echo "${{ secrets.KUBECONFIG_PROD }}" | base64 -d > $HOME/.kube/config
    
    - name: Update images in deployment
      run: |
        cd k8s
        sed -i "s|image: speaker:latest|image: ${{ needs.build-and-push.outputs.backend-image }}|g" deployment.yaml
        sed -i "s|image: speaker-frontend:latest|image: ${{ needs.build-and-push.outputs.frontend-image }}|g" frontend-deployment.yaml
    
    - name: Deploy to production
      run: |
        cd k8s
        kubectl apply -f namespace.yaml
        kubectl apply -f configmap.yaml
        kubectl apply -f secret.yaml
        kubectl apply -f pvc.yaml
        kubectl apply -f deployment.yaml
        kubectl apply -f frontend-deployment.yaml
        kubectl apply -f service.yaml
        kubectl apply -f frontend-service.yaml
        kubectl apply -f ingress.yaml
        kubectl apply -f hpa.yaml
        kubectl apply -f monitoring/
    
    - name: Wait for deployment
      run: |
        kubectl wait --for=condition=available --timeout=600s deployment/speaker -n speaker
        kubectl wait --for=condition=available --timeout=600s deployment/speaker-frontend -n speaker
    
    - name: Run production health checks
      run: |
        # Wait for ingress to be ready
        sleep 30
        curl -f https://speaker-api.yourdomain.com/health || exit 1
        curl -f https://speaker-api.yourdomain.com/voices || exit 1
        curl -f https://speaker.yourdomain.com/ || exit 1
    
    - name: Notify deployment
      uses: 8398a7/action-slack@v3
      if: always()
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        text: |
          TTS API deployment to production: ${{ job.status }}
          Backend Image: ${{ needs.build-and-push.outputs.backend-image }}
          Frontend Image: ${{ needs.build-and-push.outputs.frontend-image }}
          Commit: ${{ github.sha }} 